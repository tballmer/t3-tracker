// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String          @id @default(cuid())
    name            String?
    email           String?         @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    projects        Project[]
    project_members ProjectMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
  id              String           @id @default(cuid())
  title           String
  description     String?
  creatorId       String
  creator         User             @relation(fields: [creatorId], references: [id])
  project_members ProjectMember[]
  tags            Tag[]
}

model ProjectMember {
  id            String         @id @default(cuid())
  project_role  ProjectRole
  projectId     String
  userId        String
  project       Project        @relation(fields: [projectId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  issue_members IssueMember[]
  
  @@unique([projectId, userId])
}

model Issue {
  id              String          @id @default(cuid())
  title           String
  description     String?
  priority        Priority
  status          Status          @default(In_Progress)
  issue_members   IssueMember[]
  tags_for_issues TagForIssue[]
}

model IssueMember {
  id               String         @id @default(cuid())
  issue_role       IssueRole
  issueId          String
  project_memberId String
  issue            Issue          @relation(fields: [issueId], references: [id])
  project_member   ProjectMember @relation(fields: [project_memberId], references: [id])

  @@unique([issueId, project_memberId])
}

model Tag {
  id              String          @id @default(cuid())
  name            String          @unique
  projectId       String
  project         Project         @relation(fields: [projectId], references: [id])
  tags_for_issues TagForIssue[]
}

model TagForIssue {
  id      String @id @default(cuid())
  issueId String
  tagId   String
  issue   Issue  @relation(fields: [issueId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])

  @@unique([issueId, tagId])
}

enum Priority {
  Low
  Medium
  High
}

enum Status {
  Complete
  In_Progress
}

enum ProjectRole {
  Creator
  Member
}

enum IssueRole {
  Creator
  Assigned
}